//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Banking;

public class Credit implements java.lang.Cloneable,
                               java.io.Serializable
{
    public Currency nativeCurrency;

    public float nativeCurrencyCost;

    public Currency foreignCurrency;

    public float foreignCurrencyCost;

    public Credit()
    {
        this.nativeCurrency = Currency.PLN;
        this.foreignCurrency = Currency.PLN;
    }

    public Credit(Currency nativeCurrency, float nativeCurrencyCost, Currency foreignCurrency, float foreignCurrencyCost)
    {
        this.nativeCurrency = nativeCurrency;
        this.nativeCurrencyCost = nativeCurrencyCost;
        this.foreignCurrency = foreignCurrency;
        this.foreignCurrencyCost = foreignCurrencyCost;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Credit r = null;
        if(rhs instanceof Credit)
        {
            r = (Credit)rhs;
        }

        if(r != null)
        {
            if(this.nativeCurrency != r.nativeCurrency)
            {
                if(this.nativeCurrency == null || r.nativeCurrency == null || !this.nativeCurrency.equals(r.nativeCurrency))
                {
                    return false;
                }
            }
            if(this.nativeCurrencyCost != r.nativeCurrencyCost)
            {
                return false;
            }
            if(this.foreignCurrency != r.foreignCurrency)
            {
                if(this.foreignCurrency == null || r.foreignCurrency == null || !this.foreignCurrency.equals(r.foreignCurrency))
                {
                    return false;
                }
            }
            if(this.foreignCurrencyCost != r.foreignCurrencyCost)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Banking::Credit");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nativeCurrency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nativeCurrencyCost);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, foreignCurrency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, foreignCurrencyCost);
        return h_;
    }

    public Credit clone()
    {
        Credit c = null;
        try
        {
            c = (Credit)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Currency.ice_write(ostr, this.nativeCurrency);
        ostr.writeFloat(this.nativeCurrencyCost);
        Currency.ice_write(ostr, this.foreignCurrency);
        ostr.writeFloat(this.foreignCurrencyCost);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.nativeCurrency = Currency.ice_read(istr);
        this.nativeCurrencyCost = istr.readFloat();
        this.foreignCurrency = Currency.ice_read(istr);
        this.foreignCurrencyCost = istr.readFloat();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Credit v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Credit ice_read(com.zeroc.Ice.InputStream istr)
    {
        Credit v = new Credit();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Credit> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Credit v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Credit> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Credit.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Credit _nullMarshalValue = new Credit();

    /** @hidden */
    public static final long serialVersionUID = 746810912L;
}
